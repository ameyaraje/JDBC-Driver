DROP DATABASE IF EXISTS moviedb;
CREATE DATABASE moviedb;
USE moviedb;

CREATE TABLE IF NOT EXISTS movies (
	id INTEGER AUTO_INCREMENT NOT NULL, 
	title VARCHAR(100) NOT NULL, 
	year INTEGER NOT NULL, 
	director VARCHAR(100) NOT NULL, 
	banner_url VARCHAR(200) DEFAULT '', 
	trailer_url VARCHAR(200) DEFAULT '', 
	PRIMARY KEY (id));

CREATE TABLE IF NOT EXISTS stars (
	id INTEGER AUTO_INCREMENT NOT NULL, 
	first_name VARCHAR(50) NOT NULL, 
	last_name VARCHAR(50) NOT NULL, 
	dob DATE, 
	photo_url VARCHAR(200) DEFAULT '', 
	PRIMARY KEY (id));

CREATE TABLE IF NOT EXISTS stars_in_movies (
	star_id INTEGER NOT NULL, 
	movie_id INTEGER NOT NULL, 
	FOREIGN KEY (star_id) REFERENCES stars(id) ON DELETE CASCADE ON UPDATE CASCADE, 
	FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE IF NOT EXISTS genres (
	id INTEGER AUTO_INCREMENT NOT NULL, 
	name VARCHAR(32) NOT NULL, 
	PRIMARY KEY(id));

CREATE TABLE IF NOT EXISTS genres_in_movies (
	genre_id INTEGER NOT NULL, 
	movie_id INTEGER NOT NULL, 
	FOREIGN KEY (genre_id) REFERENCES genres(id) ON DELETE CASCADE ON UPDATE CASCADE, 
	FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE ON UPDATE CASCADE);

-- customers refereences credicards
CREATE TABLE IF NOT EXISTS creditcards (
	id VARCHAR(20) NOT NULL, 
	first_name VARCHAR(50) NOT NULL, 
	last_name VARCHAR(50) NOT NULL, 
	expiration DATE NOT NULL, PRIMARY KEY (id));

CREATE TABLE IF NOT EXISTS customers (
	id INTEGER AUTO_INCREMENT NOT NULL, 
	first_name VARCHAR(50) NOT NULL, 
	last_name VARCHAR(50) NOT NULL, 
	cc_id VARCHAR(20) NOT NULL, 
	address VARCHAR(200) NOT NULL, 
	email VARCHAR(50) NOT NULL, 
	password VARCHAR (20) NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY (cc_id) REFERENCES creditcards(id) ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE IF NOT EXISTS sales (
	id INTEGER AUTO_INCREMENT NOT NULL, 
	customer_id INTEGER NOT NULL, 
	movie_id INTEGER NOT NULL, 
	sale_date DATE NOT NULL, 
	PRIMARY KEY (id), 
	CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES customers(id) ON DELETE CASCADE ON UPDATE CASCADE, 
	FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE ON UPDATE CASCADE);
